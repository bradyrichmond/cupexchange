# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User @model @auth(rules: [ 
    {allow: private, operations: [read, create]},
    {allow: owner, operations: [update, delete]}
  ]) {
  id: ID!
  fbUsername: String!
  first_name: String!
  last_name: String!
  address: Address @hasOne
  email: String!
  banned: Boolean @auth(rules:[
      {allow: groups, groups: ["moderators"], operations: [update]},
      {allow: private, operations:[read]}
    ])
  deleted: Boolean @auth(rules:[
    {allow: groups, groups: ["admins"], operations: [update]},
    {allow: private, operations:[read]}
  ])
}

type Address @model @auth(rules: [{ allow: private }]) {
  id: ID!
  address: String!
  address2: String
  district: String!
  city: String!
  postal_code: String!
}

type Store @model @auth(rules: [
    {allow: groups, groups: ["moderators", "admins"], operations: [create, update, delete]},
    {allow: private, operations: [read]}
  ]) {
  id: ID!
  name: String!
  district: String!
  city: String!
  lastUpdateBy: User! @hasOne
  inventory: Inventory @hasOne
}

type Inventory @model @auth(rules: [{ allow: private }]) {
  id: ID!
  items: [Lego!]! @hasMany
}

type Lego @model @auth(rules: [{ allow: private }]) {
  id: ID!
  imageKey: String!
  labels: [String]
  comments: [Comment] @hasMany
}

type Trip @model @auth(rules: [
    { allow: groups, groups: ["moderators", "admins"], operations: [update, delete] },
    { allow: owner, operations: [update, delete] },
    { allow: private, operations: [create, read] }
  ]) 
{
  store: Store! @hasOne
  shipper: User! @hasOne
  cupPrice: String!
  shippingPrice: String!
  orderExpiration: Float!
  maximumCups: Int
}

type Order @model @auth(rules: [
  { allow: groups, groups: ["moderators", "admins"], operations: [update, delete] },
  { allow: owner, operations: [update, delete] },
  { allow: private, operations: [create, read] }
]) 
{
  id: ID!
  buyer: User! @hasOne
  shipper: User! @hasOne
  tracking: [String]!
  numberOfCups: Int!
  orders: [OrderItem!]! @hasMany
  trip: Trip! @hasOne
  total: Float!
}

type OrderItem @model @auth(rules: [
  { allow: private }
]) {
  item: Lego! @hasOne
  count: Int!
}

type Comment @model @auth(rules: [
    { allow: groups, groups: ["moderators", "admins"], operations: [update, delete] },
    { allow: owner, operations: [update, delete] },
    { allow: private, operations: [create, read] }
  ]) 
{
  id: ID!
  createdBy: User! @hasOne
  parent: String
  comment: String!
  createdAt: String
  edited: Boolean
}

type Review @model @auth(rules: [
    { allow: groups, groups: ["moderators", "admins"], operations: [update, delete] },
    { allow: owner, operations: [update, delete] },
    { allow: private, operations: [create, read] }
  ]) 
{
  id: ID!
  comment: Comment @hasOne
  positive: Boolean
  reviewOf: User! @hasOne
  reviewBy: User! @hasOne
}